#@ load("@ytt:data","data")
#@ load("@ytt:json", "json")
#@ load("@ytt:base64", "base64")

---
apiVersion: v1
kind: Namespace
metadata:
  name: secrets-management

---
apiVersion: v1
kind: Secret
metadata:
  name: registry-credentials
  namespace: secrets-management
type: kubernetes.io/dockerconfigjson
stringData:
  #@ auth_string = data.values.registry.username + ":" + data.values.registry.password
  #@ registry_credentials = {"username": data.values.registry.username, "password": data.values.registry.password, "auth": base64.encode(auth_string)}
  .dockerconfigjson: #@ json.encode({"auths": {data.values.registry.server: registry_credentials}})

---
apiVersion: secretgen.carvel.dev/v1alpha1
kind: SecretExport
metadata:
  name: registry-credentials
  namespace: secrets-management
spec:
  toNamespaces:
  #@ for namespace in data.values.namespaces:
  - #@ namespace.name
  #@ end

---
apiVersion: v1
kind: Secret
metadata:
  name: git-secret
  namespace: secrets-management
  annotations:
    tekton.dev/git-0: #@ data.values.gitops.server
type: kubernetes.io/basic-auth
stringData:
  username: #@ data.values.gitops.username
  password: #@ data.values.gitops.password

---
apiVersion: secretgen.carvel.dev/v1alpha1
kind: SecretExport
metadata:
  name: git-secret
  namespace: secrets-management
spec:
  toNamespaces:
  #@ for namespace in data.values.namespaces:
  - #@ namespace.name
  #@ end

---
apiVersion: secretgen.carvel.dev/v1alpha1
kind: SecretExport
metadata:
  name: cosign-key-pair
  namespace: secrets-management
spec:
  toNamespaces:
  #@ for namespace in data.values.namespaces:
  - #@ namespace.name
  #@ end
